{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(sendDummyPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(removePost),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(loadPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(changeTag),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(loadSearchPost),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(loadChangeSearchPost),\n    _marked8 = /*#__PURE__*/_regeneratorRuntime.mark(rentalPost),\n    _marked9 = /*#__PURE__*/_regeneratorRuntime.mark(writePost),\n    _marked10 = /*#__PURE__*/_regeneratorRuntime.mark(loadSPost),\n    _marked11 = /*#__PURE__*/_regeneratorRuntime.mark(updateSPost),\n    _marked12 = /*#__PURE__*/_regeneratorRuntime.mark(likePost),\n    _marked13 = /*#__PURE__*/_regeneratorRuntime.mark(unlikePost),\n    _marked14 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked15 = /*#__PURE__*/_regeneratorRuntime.mark(uploadImages),\n    _marked16 = /*#__PURE__*/_regeneratorRuntime.mark(loadUserPosts),\n    _marked17 = /*#__PURE__*/_regeneratorRuntime.mark(RelatedPost),\n    _marked18 = /*#__PURE__*/_regeneratorRuntime.mark(loadHashtagPosts),\n    _marked19 = /*#__PURE__*/_regeneratorRuntime.mark(loadLikedPosts),\n    _marked20 = /*#__PURE__*/_regeneratorRuntime.mark(modifyPost),\n    _marked21 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked22 = /*#__PURE__*/_regeneratorRuntime.mark(watchRemovePost),\n    _marked23 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked24 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPost),\n    _marked25 = /*#__PURE__*/_regeneratorRuntime.mark(watchLikePost),\n    _marked26 = /*#__PURE__*/_regeneratorRuntime.mark(watchUnLikePost),\n    _marked27 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked28 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadSPost),\n    _marked29 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked30 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked31 = /*#__PURE__*/_regeneratorRuntime.mark(watchModifyPost),\n    _marked32 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadRelatedPost),\n    _marked33 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadLikedtagPosts),\n    _marked34 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadRentalPost),\n    _marked35 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadWritePost),\n    _marked36 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadSearchPost),\n    _marked37 = /*#__PURE__*/_regeneratorRuntime.mark(watchSendDummyPost),\n    _marked38 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadChangeTag),\n    _marked39 = /*#__PURE__*/_regeneratorRuntime.mark(watchloadChangeSearchPost),\n    _marked40 = /*#__PURE__*/_regeneratorRuntime.mark(watchupdateSPost),\n    _marked41 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, call, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_CHANGE_TAG_FAILURE, LOAD_CHANGE_TAG_REQUEST, LOAD_CHANGE_TAG_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_LIKED_POSTS_FAILURE, LOAD_LIKED_POSTS_REQUEST, LOAD_LIKED_POSTS_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_RELATED_POST_FAILURE, LOAD_RELATED_POST_REQUEST, LOAD_RELATED_POST_SUCCESS, LOAD_RENTAL_POST_FAILURE, LOAD_RENTAL_POST_REQUEST, LOAD_RENTAL_POST_SUCCESS, LOAD_SCHANGE_TAG_FAILURE, LOAD_SCHANGE_TAG_REQUEST, LOAD_SCHANGE_TAG_SUCCESS, LOAD_SEARCH_POSTS_FAILURE, LOAD_SEARCH_POSTS_REQUEST, LOAD_SEARCH_POSTS_SUCCESS, LOAD_SPOST_FAILURE, LOAD_SPOST_REQUEST, LOAD_SPOST_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_WRITE_POST_FAILURE, LOAD_WRITE_POST_REQUEST, LOAD_WRITE_POST_SUCCESS, MODIFY_POST_FAILURE, MODIFY_POST_REQUEST, MODIFY_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, SEND_DUMMYPOST_FAILURE, SEND_DUMMYPOST_REQUEST, SEND_DUMMYPOST_SUCCESS, STATUS_POST_FAILURE, STATUS_POST_REQUEST, STATUS_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data); // formdata 전송\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction sendDummyPostAPI(data) {\n  return axios.post('/post/write', data); // formdata 전송\n}\n\nfunction sendDummyPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function sendDummyPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(sendDummyPostAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n            type: SEND_DUMMYPOST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data\n          });\n\n        case 8:\n          _context2.next = 14;\n          break;\n\n        case 10:\n          _context2.prev = 10;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 14;\n          return put({\n            type: SEND_DUMMYPOST_FAILURE,\n            error: _context2.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 10]]);\n}\n\nfunction removePostAPI(postId, postBoardNum) {\n  return axios[\"delete\"](\"/post/delete?postId=\".concat(postId, \"&postBoardNum=\").concat(postBoardNum)); // delete는 데이터를 가져갈 수 없다 data는 postId\n}\n\nfunction removePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function removePost$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(removePostAPI, action.postId, action.postBoardNum);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n            type: REMOVE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 8;\n          return put({\n            type: REMOVE_POST_OF_ME,\n            data: result.data\n          });\n\n        case 8:\n          _context3.next = 14;\n          break;\n\n        case 10:\n          _context3.prev = 10;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 14;\n          return put({\n            type: REMOVE_POST_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 10]]);\n}\n\nfunction loadPostAPI(data, lastId, boardNum, location) {\n  console.log(data);\n  return axios.get(\"/posts/\".concat(encodeURIComponent(data), \"/post?lastId=\").concat(lastId || 0, \"&boardNum=\").concat(boardNum || 0, \"&location=\").concat(encodeURIComponent(location))); // api 서버 요청은 /user/:userId/posts\n}\n\nfunction loadPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(loadPostAPI, action.data, action.lastId, action.boardNum, action.location);\n\n        case 3:\n          result = _context4.sent;\n          _context4.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 비슷하게 본다\n            type: LOAD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context4.next = 13;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.error(_context4.t0);\n          _context4.next = 13;\n          return put({\n            type: LOAD_POST_FAILURE,\n            error: _context4.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[0, 8]]);\n}\n\nfunction changeTagAPI(data, boardNum, location) {\n  console.log(data);\n  return axios.get(\"/posts/\".concat(encodeURIComponent(data), \"/tag?boardNum=\").concat(boardNum || 0, \"&location=\").concat(encodeURIComponent(location))); // api 서버 요청은 /user/:userId/posts\n}\n\nfunction changeTag(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function changeTag$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(changeTagAPI, action.data, action.boardNum, action.location);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 비슷하게 본다\n            type: LOAD_CHANGE_TAG_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context5.next = 13;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          console.error(_context5.t0);\n          _context5.next = 13;\n          return put({\n            type: LOAD_CHANGE_TAG_FAILURE,\n            error: _context5.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction loadSearchPostAPI(select, searchword, location, boardNum, lastId) {\n  return axios.get(\"/posts/search?select=\".concat(encodeURIComponent(select), \"&location=\").concat(encodeURIComponent(location), \"\\n  &searchword=\").concat(encodeURIComponent(searchword), \"&boardNum=\").concat(boardNum, \"&lastId=\").concat(lastId || 0));\n} // api 서버 요청은 GET/posts/search/\n\n\nfunction loadSearchPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadSearchPost$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.prev = 0;\n          _context6.next = 3;\n          return call(loadSearchPostAPI, action.select, action.searchword, action.location, action.boardNum, action.lastId);\n\n        case 3:\n          result = _context6.sent;\n          _context6.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 비슷하게 본다\n            type: LOAD_SEARCH_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context6.next = 13;\n          break;\n\n        case 8:\n          _context6.prev = 8;\n          _context6.t0 = _context6[\"catch\"](0);\n          console.error(_context6.t0);\n          _context6.next = 13;\n          return put({\n            type: LOAD_SEARCH_POSTS_FAILURE,\n            error: _context6.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, null, [[0, 8]]);\n}\n\nfunction loadChangeSearchPostAPI(select, searchword, location, boardNum, lastId, tag) {\n  return axios.get(\"/posts/searchTag?select=\".concat(encodeURIComponent(select), \"&location=\").concat(encodeURIComponent(location), \"\\n  &searchword=\").concat(encodeURIComponent(searchword), \"&boardNum=\").concat(boardNum, \"&lastId=\").concat(lastId || 0, \"&tag=\").concat(encodeURIComponent(tag)));\n} // api 서버 요청은 GET/posts/search/\n\n\nfunction loadChangeSearchPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadChangeSearchPost$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(loadChangeSearchPostAPI, action.select, action.searchword, action.location, action.boardNum, action.lastId, action.tag);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 비슷하게 본다\n            type: LOAD_SCHANGE_TAG_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 13;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          console.error(_context7.t0);\n          _context7.next = 13;\n          return put({\n            type: LOAD_SCHANGE_TAG_FAILURE,\n            error: _context7.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction rentalPostAPI(data, lastId) {\n  // 대상유저 id\n  console.log(data);\n  return axios.get(\"/posts/\".concat(data, \"/post?lastId=\").concat(lastId || 0)); // api 서버 요청은 /user/:userId/posts\n}\n\nfunction rentalPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function rentalPost$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.prev = 0;\n          _context8.next = 3;\n          return call(rentalPostAPI, action.data, action.lastId);\n\n        case 3:\n          result = _context8.sent;\n          _context8.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 비슷하게 본다\n            type: LOAD_RENTAL_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context8.next = 13;\n          break;\n\n        case 8:\n          _context8.prev = 8;\n          _context8.t0 = _context8[\"catch\"](0);\n          console.error(_context8.t0);\n          _context8.next = 13;\n          return put({\n            type: LOAD_RENTAL_POST_FAILURE,\n            error: _context8.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, null, [[0, 8]]);\n}\n\nfunction writePostAPI(data, lastId) {\n  // 대상유저 id\n  console.log(data);\n  return axios.get(\"/posts/\".concat(data, \"/post?lastId=\").concat(lastId || 0)); // api 서버 요청은 /user/:userId/posts\n}\n\nfunction writePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function writePost$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(writePostAPI, action.data, action.lastId);\n\n        case 3:\n          result = _context9.sent;\n          _context9.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 비슷하게 본다\n            type: LOAD_WRITE_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context9.next = 13;\n          break;\n\n        case 8:\n          _context9.prev = 8;\n          _context9.t0 = _context9[\"catch\"](0);\n          console.error(_context9.t0);\n          _context9.next = 13;\n          return put({\n            type: LOAD_WRITE_POST_FAILURE,\n            error: _context9.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 8]]);\n}\n\nfunction loadSPostAPI(postId, postBoardNum) {\n  return axios.get(\"/post/singlepost?postId=\".concat(postId, \"&postBoardNum=\").concat(postBoardNum));\n}\n\nfunction loadSPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadSPost$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.prev = 0;\n          _context10.next = 3;\n          return call(loadSPostAPI, action.postId, action.postBoardNum);\n\n        case 3:\n          result = _context10.sent;\n          _context10.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n            type: LOAD_SPOST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context10.next = 12;\n          break;\n\n        case 8:\n          _context10.prev = 8;\n          _context10.t0 = _context10[\"catch\"](0);\n          _context10.next = 12;\n          return put({\n            type: LOAD_SPOST_FAILURE,\n            error: _context10.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10, null, [[0, 8]]);\n}\n\nfunction updateSPostAPI(postId, postBoardNum, postStatus) {\n  return axios.get(\"/post/status?postId=\".concat(postId, \"&postBoardNum=\").concat(postBoardNum, \"&postStatus=\").concat(postStatus));\n}\n\nfunction updateSPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function updateSPost$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          _context11.next = 3;\n          return call(updateSPostAPI, action.postId, action.postBoardNum, action.postStatus);\n\n        case 3:\n          result = _context11.sent;\n          _context11.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n            type: STATUS_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context11.next = 12;\n          break;\n\n        case 8:\n          _context11.prev = 8;\n          _context11.t0 = _context11[\"catch\"](0);\n          _context11.next = 12;\n          return put({\n            type: STATUS_POST_FAILURE,\n            error: _context11.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[0, 8]]);\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(\"/post/\".concat(data, \"/like\"));\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.prev = 0;\n          _context12.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context12.sent;\n          _context12.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n            type: LIKE_POST_SUCCESS,\n            data: result.data // PostId,UserId\n\n          });\n\n        case 6:\n          _context12.next = 12;\n          break;\n\n        case 8:\n          _context12.prev = 8;\n          _context12.t0 = _context12[\"catch\"](0);\n          _context12.next = 12;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context12.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12, null, [[0, 8]]);\n}\n\nfunction unlikePostAPI(data) {\n  return axios[\"delete\"](\"/post/\".concat(data, \"/like\"));\n}\n\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePost$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.prev = 0;\n          _context13.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context13.sent;\n          _context13.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n            type: UNLIKE_POST_SUCCESS,\n            data: result.data // PostId,UserId\n\n          });\n\n        case 6:\n          _context13.next = 12;\n          break;\n\n        case 8:\n          _context13.prev = 8;\n          _context13.t0 = _context13[\"catch\"](0);\n          _context13.next = 12;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context13.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13, null, [[0, 8]]);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data);\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.prev = 0;\n          _context14.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context14.sent;\n          _context14.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 비슷하게 본다\n            type: ADD_COMMENT_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context14.next = 13;\n          break;\n\n        case 8:\n          _context14.prev = 8;\n          _context14.t0 = _context14[\"catch\"](0);\n          console.error(_context14.t0);\n          _context14.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context14.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14, null, [[0, 8]]);\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data); // formdata는 { name: data } 같은 식으로 감싸버리면 json으로 자동 변환되버린다.\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.prev = 0;\n          _context15.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          result = _context15.sent;\n          _context15.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 비슷하게 본다\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context15.next = 13;\n          break;\n\n        case 8:\n          _context15.prev = 8;\n          _context15.t0 = _context15[\"catch\"](0);\n          console.error(_context15.t0);\n          _context15.next = 13;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context15.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15, null, [[0, 8]]);\n}\n\nfunction loadUserPostsAPI(data, lastId) {\n  return axios.get(\"/user/\".concat(data, \"/posts?lastId=\").concat(lastId || 0)); // api 서버 요청은 /user/:userId/posts\n}\n\nfunction loadUserPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUserPosts$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.prev = 0;\n          _context16.next = 3;\n          return call(loadUserPostsAPI, action.data, action.lastId);\n\n        case 3:\n          result = _context16.sent;\n          _context16.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 비슷하게 본다\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context16.next = 13;\n          break;\n\n        case 8:\n          _context16.prev = 8;\n          _context16.t0 = _context16[\"catch\"](0);\n          console.error(_context16.t0);\n          _context16.next = 13;\n          return put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: _context16.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16, null, [[0, 8]]);\n}\n\nfunction RelatedPostAPI(lastId) {\n  return axios.get(\"/posts/related?lastId=\".concat(lastId || 0));\n}\n\nfunction RelatedPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function RelatedPost$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.prev = 0;\n          _context17.next = 3;\n          return call(RelatedPostAPI, action.data, action.lastId);\n\n        case 3:\n          result = _context17.sent;\n          _context17.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 비슷하게 본다\n            type: LOAD_RELATED_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context17.next = 13;\n          break;\n\n        case 8:\n          _context17.prev = 8;\n          _context17.t0 = _context17[\"catch\"](0);\n          console.error(_context17.t0);\n          _context17.next = 13;\n          return put({\n            type: LOAD_RELATED_POST_FAILURE,\n            error: _context17.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17, null, [[0, 8]]);\n}\n\nfunction loadHashtagPostsAPI(data, lastId) {\n  return axios.get(\"/hashtag/\".concat(encodeURIComponent(data), \"?lastId=\").concat(lastId || 0));\n}\n\nfunction loadHashtagPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadHashtagPosts$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.prev = 0;\n          _context18.next = 3;\n          return call(loadHashtagPostsAPI, action.data, action.lastId);\n\n        case 3:\n          result = _context18.sent;\n          _context18.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 비슷하게 본다\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context18.next = 13;\n          break;\n\n        case 8:\n          _context18.prev = 8;\n          _context18.t0 = _context18[\"catch\"](0);\n          console.error(_context18.t0);\n          _context18.next = 13;\n          return put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: _context18.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _marked18, null, [[0, 8]]);\n}\n\nfunction loadLikedPostsAPI(data, lastId) {\n  return axios.get(\"/liked?lastId=\".concat(lastId || 0));\n}\n\nfunction loadLikedPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadLikedPosts$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.prev = 0;\n          _context19.next = 3;\n          return call(loadLikedPostsAPI, action.data, action.lastId);\n\n        case 3:\n          result = _context19.sent;\n          _context19.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 비슷하게 본다\n            type: LOAD_LIKED_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context19.next = 13;\n          break;\n\n        case 8:\n          _context19.prev = 8;\n          _context19.t0 = _context19[\"catch\"](0);\n          console.error(_context19.t0);\n          _context19.next = 13;\n          return put({\n            type: LOAD_LIKED_POSTS_FAILURE,\n            error: _context19.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _marked19, null, [[0, 8]]);\n}\n\nfunction modifyPostAPI(data) {\n  return axios.patch('/post/edit', data);\n}\n\nfunction modifyPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function modifyPost$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          _context20.prev = 0;\n          _context20.next = 3;\n          return call(modifyPostAPI, action.data);\n\n        case 3:\n          result = _context20.sent;\n          _context20.next = 6;\n          return put({\n            // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n            type: MODIFY_POST_SUCCESS,\n            data: result.data // PostId,UserId\n\n          });\n\n        case 6:\n          _context20.next = 12;\n          break;\n\n        case 8:\n          _context20.prev = 8;\n          _context20.t0 = _context20[\"catch\"](0);\n          _context20.next = 12;\n          return put({\n            type: MODIFY_POST_FAILURE,\n            error: _context20.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, _marked20, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          _context21.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, _marked21);\n}\n\nfunction watchRemovePost() {\n  return _regeneratorRuntime.wrap(function watchRemovePost$(_context22) {\n    while (1) {\n      switch (_context22.prev = _context22.next) {\n        case 0:\n          _context22.next = 2;\n          return takeLatest(REMOVE_POST_REQUEST, removePost);\n\n        case 2:\n        case \"end\":\n          return _context22.stop();\n      }\n    }\n  }, _marked22);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context23) {\n    while (1) {\n      switch (_context23.prev = _context23.next) {\n        case 0:\n          _context23.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context23.stop();\n      }\n    }\n  }, _marked23);\n}\n\nfunction watchLoadPost() {\n  return _regeneratorRuntime.wrap(function watchLoadPost$(_context24) {\n    while (1) {\n      switch (_context24.prev = _context24.next) {\n        case 0:\n          _context24.next = 2;\n          return takeLatest(LOAD_POST_REQUEST, loadPost);\n\n        case 2:\n        case \"end\":\n          return _context24.stop();\n      }\n    }\n  }, _marked24);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context25) {\n    while (1) {\n      switch (_context25.prev = _context25.next) {\n        case 0:\n          _context25.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context25.stop();\n      }\n    }\n  }, _marked25);\n}\n\nfunction watchUnLikePost() {\n  return _regeneratorRuntime.wrap(function watchUnLikePost$(_context26) {\n    while (1) {\n      switch (_context26.prev = _context26.next) {\n        case 0:\n          _context26.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context26.stop();\n      }\n    }\n  }, _marked26);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context27) {\n    while (1) {\n      switch (_context27.prev = _context27.next) {\n        case 0:\n          _context27.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context27.stop();\n      }\n    }\n  }, _marked27);\n}\n\nfunction watchLoadSPost() {\n  return _regeneratorRuntime.wrap(function watchLoadSPost$(_context28) {\n    while (1) {\n      switch (_context28.prev = _context28.next) {\n        case 0:\n          _context28.next = 2;\n          return takeLatest(LOAD_SPOST_REQUEST, loadSPost);\n\n        case 2:\n        case \"end\":\n          return _context28.stop();\n      }\n    }\n  }, _marked28);\n}\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context29) {\n    while (1) {\n      switch (_context29.prev = _context29.next) {\n        case 0:\n          _context29.next = 2;\n          return takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n\n        case 2:\n        case \"end\":\n          return _context29.stop();\n      }\n    }\n  }, _marked29);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context30) {\n    while (1) {\n      switch (_context30.prev = _context30.next) {\n        case 0:\n          _context30.next = 2;\n          return takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n\n        case 2:\n        case \"end\":\n          return _context30.stop();\n      }\n    }\n  }, _marked30);\n}\n\nfunction watchModifyPost() {\n  return _regeneratorRuntime.wrap(function watchModifyPost$(_context31) {\n    while (1) {\n      switch (_context31.prev = _context31.next) {\n        case 0:\n          _context31.next = 2;\n          return takeLatest(MODIFY_POST_REQUEST, modifyPost);\n\n        case 2:\n        case \"end\":\n          return _context31.stop();\n      }\n    }\n  }, _marked31);\n}\n\nfunction watchLoadRelatedPost() {\n  return _regeneratorRuntime.wrap(function watchLoadRelatedPost$(_context32) {\n    while (1) {\n      switch (_context32.prev = _context32.next) {\n        case 0:\n          _context32.next = 2;\n          return takeLatest(LOAD_RELATED_POST_REQUEST, RelatedPost);\n\n        case 2:\n        case \"end\":\n          return _context32.stop();\n      }\n    }\n  }, _marked32);\n}\n\nfunction watchLoadLikedtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadLikedtagPosts$(_context33) {\n    while (1) {\n      switch (_context33.prev = _context33.next) {\n        case 0:\n          _context33.next = 2;\n          return takeLatest(LOAD_LIKED_POSTS_REQUEST, loadLikedPosts);\n\n        case 2:\n        case \"end\":\n          return _context33.stop();\n      }\n    }\n  }, _marked33);\n}\n\nfunction watchLoadRentalPost() {\n  return _regeneratorRuntime.wrap(function watchLoadRentalPost$(_context34) {\n    while (1) {\n      switch (_context34.prev = _context34.next) {\n        case 0:\n          _context34.next = 2;\n          return takeLatest(LOAD_RENTAL_POST_REQUEST, rentalPost);\n\n        case 2:\n        case \"end\":\n          return _context34.stop();\n      }\n    }\n  }, _marked34);\n}\n\nfunction watchLoadWritePost() {\n  return _regeneratorRuntime.wrap(function watchLoadWritePost$(_context35) {\n    while (1) {\n      switch (_context35.prev = _context35.next) {\n        case 0:\n          _context35.next = 2;\n          return takeLatest(LOAD_WRITE_POST_REQUEST, writePost);\n\n        case 2:\n        case \"end\":\n          return _context35.stop();\n      }\n    }\n  }, _marked35);\n}\n\nfunction watchLoadSearchPost() {\n  return _regeneratorRuntime.wrap(function watchLoadSearchPost$(_context36) {\n    while (1) {\n      switch (_context36.prev = _context36.next) {\n        case 0:\n          _context36.next = 2;\n          return takeLatest(LOAD_SEARCH_POSTS_REQUEST, loadSearchPost);\n\n        case 2:\n        case \"end\":\n          return _context36.stop();\n      }\n    }\n  }, _marked36);\n}\n\nfunction watchSendDummyPost() {\n  return _regeneratorRuntime.wrap(function watchSendDummyPost$(_context37) {\n    while (1) {\n      switch (_context37.prev = _context37.next) {\n        case 0:\n          _context37.next = 2;\n          return takeLatest(SEND_DUMMYPOST_REQUEST, sendDummyPost);\n\n        case 2:\n        case \"end\":\n          return _context37.stop();\n      }\n    }\n  }, _marked37);\n}\n\nfunction watchLoadChangeTag() {\n  return _regeneratorRuntime.wrap(function watchLoadChangeTag$(_context38) {\n    while (1) {\n      switch (_context38.prev = _context38.next) {\n        case 0:\n          _context38.next = 2;\n          return takeLatest(LOAD_CHANGE_TAG_REQUEST, changeTag);\n\n        case 2:\n        case \"end\":\n          return _context38.stop();\n      }\n    }\n  }, _marked38);\n}\n\nfunction watchloadChangeSearchPost() {\n  return _regeneratorRuntime.wrap(function watchloadChangeSearchPost$(_context39) {\n    while (1) {\n      switch (_context39.prev = _context39.next) {\n        case 0:\n          _context39.next = 2;\n          return takeLatest(LOAD_SCHANGE_TAG_REQUEST, loadChangeSearchPost);\n\n        case 2:\n        case \"end\":\n          return _context39.stop();\n      }\n    }\n  }, _marked39);\n}\n\nfunction watchupdateSPost() {\n  return _regeneratorRuntime.wrap(function watchupdateSPost$(_context40) {\n    while (1) {\n      switch (_context40.prev = _context40.next) {\n        case 0:\n          _context40.next = 2;\n          return takeLatest(STATUS_POST_REQUEST, updateSPost);\n\n        case 2:\n        case \"end\":\n          return _context40.stop();\n      }\n    }\n  }, _marked40);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context41) {\n    while (1) {\n      switch (_context41.prev = _context41.next) {\n        case 0:\n          _context41.next = 2;\n          return all([fork(watchAddPost), fork(watchLoadSPost), fork(watchLoadPost), fork(watchLoadRelatedPost), fork(watchLoadHashtagPosts), fork(watchLoadLikedtagPosts), fork(watchLoadUserPosts), fork(watchLikePost), fork(watchUnLikePost), fork(watchRemovePost), fork(watchModifyPost), fork(watchAddComment), fork(watchUploadImages), fork(watchLoadRentalPost), fork(watchLoadWritePost), fork(watchLoadSearchPost), fork(watchSendDummyPost), fork(watchLoadChangeTag), fork(watchloadChangeSearchPost), fork(watchupdateSPost)]);\n\n        case 2:\n        case \"end\":\n          return _context41.stop();\n      }\n    }\n  }, _marked41);\n}","map":null,"metadata":{},"sourceType":"module"}