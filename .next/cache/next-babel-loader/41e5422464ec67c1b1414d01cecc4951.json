{"ast":null,"code":"import { all, call, fork, put, takeLatest } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { ADD_COMMENT_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_POST_FAILURE, ADD_POST_REQUEST, ADD_POST_SUCCESS, LIKE_POST_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LOAD_CHANGE_TAG_FAILURE, LOAD_CHANGE_TAG_REQUEST, LOAD_CHANGE_TAG_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_LIKED_POSTS_FAILURE, LOAD_LIKED_POSTS_REQUEST, LOAD_LIKED_POSTS_SUCCESS, LOAD_POST_FAILURE, LOAD_POST_REQUEST, LOAD_POST_SUCCESS, LOAD_RELATED_POST_FAILURE, LOAD_RELATED_POST_REQUEST, LOAD_RELATED_POST_SUCCESS, LOAD_RENTAL_POST_FAILURE, LOAD_RENTAL_POST_REQUEST, LOAD_RENTAL_POST_SUCCESS, LOAD_SCHANGE_TAG_FAILURE, LOAD_SCHANGE_TAG_REQUEST, LOAD_SCHANGE_TAG_SUCCESS, LOAD_SEARCH_POSTS_FAILURE, LOAD_SEARCH_POSTS_REQUEST, LOAD_SEARCH_POSTS_SUCCESS, LOAD_SPOST_FAILURE, LOAD_SPOST_REQUEST, LOAD_SPOST_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_WRITE_POST_FAILURE, LOAD_WRITE_POST_REQUEST, LOAD_WRITE_POST_SUCCESS, MODIFY_POST_FAILURE, MODIFY_POST_REQUEST, MODIFY_POST_SUCCESS, REMOVE_POST_FAILURE, REMOVE_POST_REQUEST, REMOVE_POST_SUCCESS, SEND_DUMMYPOST_FAILURE, SEND_DUMMYPOST_REQUEST, SEND_DUMMYPOST_SUCCESS, STATUS_POST_FAILURE, STATUS_POST_REQUEST, STATUS_POST_SUCCESS, UNLIKE_POST_FAILURE, UNLIKE_POST_REQUEST, UNLIKE_POST_SUCCESS, UPLOAD_IMAGES_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS } from '../reducers/post';\nimport { ADD_POST_TO_ME, REMOVE_POST_OF_ME } from '../reducers/user';\n\nfunction addPostAPI(data) {\n  return axios.post('/post', data); // formdata 전송\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    });\n  } catch (err) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction sendDummyPostAPI(data) {\n  return axios.post('/post/write', data); // formdata 전송\n}\n\nfunction* sendDummyPost(action) {\n  try {\n    const result = yield call(sendDummyPostAPI, action.data);\n    yield put({\n      // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n      type: SEND_DUMMYPOST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: SEND_DUMMYPOST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction removePostAPI(postId, postBoardNum) {\n  return axios.delete(`/post/delete?postId=${postId}&postBoardNum=${postBoardNum}`); // delete는 데이터를 가져갈 수 없다 data는 postId\n}\n\nfunction* removePost(action) {\n  try {\n    const result = yield call(removePostAPI, action.postId, action.postBoardNum);\n    yield put({\n      // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n      type: REMOVE_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: REMOVE_POST_OF_ME,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: REMOVE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadPostAPI(data, lastId, boardNum, location) {\n  console.log(data);\n  return axios.get(`/posts/${encodeURIComponent(data)}/post?lastId=${lastId || 0}&boardNum=${boardNum || 0}&location=${encodeURIComponent(location)}`); // api 서버 요청은 /user/:userId/posts\n}\n\nfunction* loadPost(action) {\n  try {\n    const result = yield call(loadPostAPI, action.data, action.lastId, action.boardNum, action.location);\n    yield put({\n      // put이 액션을 dispatch하는 역할과 비슷하게 본다\n      type: LOAD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction changeTagAPI(data, boardNum, location) {\n  console.log(data);\n  return axios.get(`/posts/${encodeURIComponent(data)}/tag?boardNum=${boardNum || 0}&location=${encodeURIComponent(location)}`); // api 서버 요청은 /user/:userId/posts\n}\n\nfunction* changeTag(action) {\n  try {\n    const result = yield call(changeTagAPI, action.data, action.boardNum, action.location);\n    yield put({\n      // put이 액션을 dispatch하는 역할과 비슷하게 본다\n      type: LOAD_CHANGE_TAG_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_CHANGE_TAG_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadSearchPostAPI(select, searchword, location, boardNum, lastId) {\n  return axios.get(`/posts/search?select=${encodeURIComponent(select)}&location=${encodeURIComponent(location)}\n  &searchword=${encodeURIComponent(searchword)}&boardNum=${boardNum}&lastId=${lastId || 0}`);\n} // api 서버 요청은 GET/posts/search/\n\n\nfunction* loadSearchPost(action) {\n  try {\n    const result = yield call(loadSearchPostAPI, action.select, action.searchword, action.location, action.boardNum, action.lastId);\n    yield put({\n      // put이 액션을 dispatch하는 역할과 비슷하게 본다\n      type: LOAD_SEARCH_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_SEARCH_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadChangeSearchPostAPI(select, searchword, location, boardNum, lastId, tag) {\n  return axios.get(`/posts/searchTag?select=${encodeURIComponent(select)}&location=${encodeURIComponent(location)}\n  &searchword=${encodeURIComponent(searchword)}&boardNum=${boardNum}&lastId=${lastId || 0}&tag=${encodeURIComponent(tag)}`);\n} // api 서버 요청은 GET/posts/search/\n\n\nfunction* loadChangeSearchPost(action) {\n  try {\n    const result = yield call(loadChangeSearchPostAPI, action.select, action.searchword, action.location, action.boardNum, action.lastId, action.tag);\n    yield put({\n      // put이 액션을 dispatch하는 역할과 비슷하게 본다\n      type: LOAD_SCHANGE_TAG_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_SCHANGE_TAG_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction rentalPostAPI(data, lastId) {\n  // 대상유저 id\n  console.log(data);\n  return axios.get(`/posts/${data}/post?lastId=${lastId || 0}`); // api 서버 요청은 /user/:userId/posts\n}\n\nfunction* rentalPost(action) {\n  try {\n    const result = yield call(rentalPostAPI, action.data, action.lastId);\n    yield put({\n      // put이 액션을 dispatch하는 역할과 비슷하게 본다\n      type: LOAD_RENTAL_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_RENTAL_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction writePostAPI(data, lastId) {\n  // 대상유저 id\n  console.log(data);\n  return axios.get(`/posts/${data}/post?lastId=${lastId || 0}`); // api 서버 요청은 /user/:userId/posts\n}\n\nfunction* writePost(action) {\n  try {\n    const result = yield call(writePostAPI, action.data, action.lastId);\n    yield put({\n      // put이 액션을 dispatch하는 역할과 비슷하게 본다\n      type: LOAD_WRITE_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_WRITE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadSPostAPI(postId, postBoardNum) {\n  return axios.get(`/post/singlepost?postId=${postId}&postBoardNum=${postBoardNum}`);\n}\n\nfunction* loadSPost(action) {\n  try {\n    const result = yield call(loadSPostAPI, action.postId, action.postBoardNum);\n    yield put({\n      // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n      type: LOAD_SPOST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: LOAD_SPOST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction updateSPostAPI(postId, postBoardNum, postStatus) {\n  return axios.get(`/post/status?postId=${postId}&postBoardNum=${postBoardNum}&postStatus=${postStatus}`);\n}\n\nfunction* updateSPost(action) {\n  try {\n    const result = yield call(updateSPostAPI, action.postId, action.postBoardNum, action.postStatus);\n    yield put({\n      // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n      type: STATUS_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    yield put({\n      type: STATUS_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction likePostAPI(data) {\n  return axios.patch(`/post/${data}/like`);\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n      type: LIKE_POST_SUCCESS,\n      data: result.data // PostId,UserId\n\n    });\n  } catch (err) {\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction unlikePostAPI(data) {\n  return axios.delete(`/post/${data}/like`);\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n      type: UNLIKE_POST_SUCCESS,\n      data: result.data // PostId,UserId\n\n    });\n  } catch (err) {\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(`/post/${data.postId}/comment`, data);\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      // put이 액션을 dispatch하는 역할과 비슷하게 본다\n      type: ADD_COMMENT_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction uploadImagesAPI(data) {\n  return axios.post('/post/images', data); // formdata는 { name: data } 같은 식으로 감싸버리면 json으로 자동 변환되버린다.\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      // put이 액션을 dispatch하는 역할과 비슷하게 본다\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadUserPostsAPI(data, lastId) {\n  return axios.get(`/user/${data}/posts?lastId=${lastId || 0}`); // api 서버 요청은 /user/:userId/posts\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data, action.lastId);\n    yield put({\n      // put이 액션을 dispatch하는 역할과 비슷하게 본다\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction RelatedPostAPI(lastId) {\n  return axios.get(`/posts/related?lastId=${lastId || 0}`);\n}\n\nfunction* RelatedPost(action) {\n  try {\n    const result = yield call(RelatedPostAPI, action.data, action.lastId);\n    yield put({\n      // put이 액션을 dispatch하는 역할과 비슷하게 본다\n      type: LOAD_RELATED_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_RELATED_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadHashtagPostsAPI(data, lastId) {\n  return axios.get(`/hashtag/${encodeURIComponent(data)}?lastId=${lastId || 0}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data, action.lastId);\n    yield put({\n      // put이 액션을 dispatch하는 역할과 비슷하게 본다\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction loadLikedPostsAPI(data, lastId) {\n  return axios.get(`/liked?lastId=${lastId || 0}`);\n}\n\nfunction* loadLikedPosts(action) {\n  try {\n    const result = yield call(loadLikedPostsAPI, action.data, action.lastId);\n    yield put({\n      // put이 액션을 dispatch하는 역할과 비슷하게 본다\n      type: LOAD_LIKED_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (err) {\n    console.error(err);\n    yield put({\n      type: LOAD_LIKED_POSTS_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction modifyPostAPI(data) {\n  return axios.patch('/post/edit', data);\n}\n\nfunction* modifyPost(action) {\n  try {\n    const result = yield call(modifyPostAPI, action.data);\n    yield put({\n      // put이 액션을 dispatch하는 역할과 빗슷하게 본다\n      type: MODIFY_POST_SUCCESS,\n      data: result.data // PostId,UserId\n\n    });\n  } catch (err) {\n    yield put({\n      type: MODIFY_POST_FAILURE,\n      error: err.response.data\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction* watchRemovePost() {\n  yield takeLatest(REMOVE_POST_REQUEST, removePost);\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nfunction* watchLoadPost() {\n  yield takeLatest(LOAD_POST_REQUEST, loadPost);\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\nfunction* watchUnLikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\nfunction* watchLoadSPost() {\n  yield takeLatest(LOAD_SPOST_REQUEST, loadSPost);\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n\nfunction* watchModifyPost() {\n  yield takeLatest(MODIFY_POST_REQUEST, modifyPost);\n}\n\nfunction* watchLoadRelatedPost() {\n  yield takeLatest(LOAD_RELATED_POST_REQUEST, RelatedPost);\n}\n\nfunction* watchLoadLikedtagPosts() {\n  yield takeLatest(LOAD_LIKED_POSTS_REQUEST, loadLikedPosts);\n}\n\nfunction* watchLoadRentalPost() {\n  yield takeLatest(LOAD_RENTAL_POST_REQUEST, rentalPost);\n}\n\nfunction* watchLoadWritePost() {\n  yield takeLatest(LOAD_WRITE_POST_REQUEST, writePost);\n}\n\nfunction* watchLoadSearchPost() {\n  yield takeLatest(LOAD_SEARCH_POSTS_REQUEST, loadSearchPost);\n}\n\nfunction* watchSendDummyPost() {\n  yield takeLatest(SEND_DUMMYPOST_REQUEST, sendDummyPost);\n}\n\nfunction* watchLoadChangeTag() {\n  yield takeLatest(LOAD_CHANGE_TAG_REQUEST, changeTag);\n}\n\nfunction* watchloadChangeSearchPost() {\n  yield takeLatest(LOAD_SCHANGE_TAG_REQUEST, loadChangeSearchPost);\n}\n\nfunction* watchupdateSPost() {\n  yield takeLatest(STATUS_POST_REQUEST, updateSPost);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadSPost), fork(watchLoadPost), fork(watchLoadRelatedPost), fork(watchLoadHashtagPosts), fork(watchLoadLikedtagPosts), fork(watchLoadUserPosts), fork(watchLikePost), fork(watchUnLikePost), fork(watchRemovePost), fork(watchModifyPost), fork(watchAddComment), fork(watchUploadImages), fork(watchLoadRentalPost), fork(watchLoadWritePost), fork(watchLoadSearchPost), fork(watchSendDummyPost), fork(watchLoadChangeTag), fork(watchloadChangeSearchPost), fork(watchupdateSPost)]);\n}","map":null,"metadata":{},"sourceType":"module"}