{"ast":null,"code":"import produce from 'immer';\nexport const initialState = {\n  mainPosts: [],\n  searchPosts: [],\n  imagePaths: [],\n  mainTalks: [],\n  talkUsers: [],\n  object_TagsData: ['전체', '공구', '의류', '전자기기', '서적', '게임/취미', '차량', '스포츠/래저', '뷰티/미용', '반려동물', '기타'],\n  talent_TagsData: ['전체', '미술', '구충', '설치', '코칭', '촬영', '일손', '기타'],\n  cooperate_tagsData: ['전체', '1+1', '배달', '공동구매', '기타'],\n  play_tagsData: ['전체', '질문', '자유'],\n  boardNum: null,\n  inputSearch: null,\n  select: null,\n  selectedTag: null,\n  category: null,\n  searchResultId: null,\n  singlePost: null,\n  hasMorePost: true,\n  searchPostLoading: false,\n  searchPostDone: false,\n  searchPostError: null,\n  loadProfilePostLoading: false,\n  loadProfilePostDone: false,\n  loadProfilePostError: null,\n  upLoadImagesLoading: false,\n  upLoadImagesDone: false,\n  upLoadImagesError: null,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadSPostLoading: false,\n  loadSPostDone: false,\n  loadSPostError: null,\n  loadPostLoading: false,\n  loadPostDone: false,\n  loadPostError: null,\n  loadUserPostsLoading: false,\n  loadUserPostsDone: false,\n  loadUserPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  modifyPostLoading: false,\n  modifyPostDone: false,\n  modifyPostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null\n};\nexport const UPDATE_SEARCH = 'UPDATE_SEARCH';\nexport const UPDATE_BOARD = 'UPDATE_BOARD';\nexport const UPDATE_CHANGE_TAG_REQUEST = 'UPDATE_CHANGE_TAG_REQUEST';\nexport const LOAD_CHANGE_TAG_REQUEST = 'LOAD_CHANGE_TAG_REQUEST';\nexport const LOAD_CHANGE_TAG_SUCCESS = 'LOAD_CHANGE_TAG_SUCCESS';\nexport const LOAD_CHANGE_TAG_FAILURE = 'LOAD_CHANGE_TAG_FAILURE';\nexport const SEND_DUMMYPOST_REQUEST = 'SEND_DUMMYPOST_REQUEST';\nexport const SEND_DUMMYPOST_SUCCESS = 'SEND_DUMMYPOST_SUCCESS';\nexport const SEND_DUMMYPOST_FAILURE = 'SEND_DUMMYPOST_FAILURE';\nexport const LOAD_SEARCH_POSTS_REQUEST = 'LOAD_SEARCH_POSTS_REQUEST';\nexport const LOAD_SEARCH_POSTS_SUCCESS = 'LOAD_SEARCH_POSTS_SUCCESS';\nexport const LOAD_SEARCH_POSTS_FAILURE = 'LOAD_SEARCH_POSTS_FAILURE';\nexport const MODIFY_POST_REQUEST = 'MODIFY_POST_REQUEST';\nexport const MODIFY_POST_SUCCESS = 'MODIFY_POST_SUCCESS';\nexport const MODIFY_POST_FAILURE = 'MODIFY_POST_FAILURE';\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport const LOAD_POST_REQUEST = 'LOAD_POST_REQUEST';\nexport const LOAD_POST_SUCCESS = 'LOAD_POST_SUCCESS';\nexport const LOAD_POST_FAILURE = 'LOAD_POST_FAILURE';\nexport const LOAD_RELATED_POST_REQUEST = 'LOAD_RELATED_POST_REQUEST';\nexport const LOAD_RELATED_POST_SUCCESS = 'LOAD_RELATED_POST_SUCCESS';\nexport const LOAD_RELATED_POST_FAILURE = 'LOAD_RELATED_POST_FAILURE';\nexport const LOAD_USER_POSTS_REQUEST = 'LOAD_USER_POSTS_REQUEST';\nexport const LOAD_USER_POSTS_SUCCESS = 'LOAD_USER_POSTS_SUCCESS';\nexport const LOAD_USER_POSTS_FAILURE = 'LOAD_USER_POSTS_FAILURE';\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport const LOAD_LIKED_POSTS_REQUEST = 'LOAD_LIKED_POSTS_REQUEST';\nexport const LOAD_LIKED_POSTS_SUCCESS = 'LOAD_LIKED_POSTS_SUCCESS';\nexport const LOAD_LIKED_POSTS_FAILURE = 'LOAD_LIKED_POSTS_FAILURE';\nexport const LOAD_SPOST_REQUEST = 'LOAD_SPOST_REQUEST';\nexport const LOAD_SPOST_SUCCESS = 'LOAD_SPOST_SUCCESS';\nexport const LOAD_SPOST_FAILURE = 'LOAD_SPOST_FAILURE';\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nexport const STATUS_POST_REQUEST = 'STATUS_POST_REQUEST';\nexport const STATUS_POST_SUCCESS = 'STATUS_POST_SUCCESS';\nexport const STATUS_POST_FAILURE = 'STATUS_POST_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport const LOAD_RENTAL_POST_REQUEST = 'LOAD_RENTAL_POST_REQUEST';\nexport const LOAD_RENTAL_POST_SUCCESS = 'LOAD_RENTAL_POST_SUCCESS';\nexport const LOAD_RENTAL_POST_FAILURE = 'LOAD_RENTAL_POST_FAILURE';\nexport const LOAD_WRITE_POST_REQUEST = 'LOAD_WRITE_POST_REQUEST';\nexport const LOAD_WRITE_POST_SUCCESS = 'LOAD_WRITE_POST_SUCCESS';\nexport const LOAD_WRITE_POST_FAILURE = 'LOAD_WRITE_POST_FAILURE';\nexport const LOAD_SCHANGE_TAG_REQUEST = 'LOAD_SCHANGE_TAG_REQUEST';\nexport const LOAD_SCHANGE_TAG_SUCCESS = 'LOAD_SCHANGE_TAG_SUCCESS';\nexport const LOAD_SCHANGE_TAG_FAILURE = 'LOAD_SCHANGE_TAG_FAILURE';\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport const UPDATE_TAG = 'UPDATE_TAG';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n}); // (이전상태,액션) => 다음상태\n\nconst reducer = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case UPDATE_BOARD:\n      draft.boardNum = action.data;\n      draft.mainPosts.length = 0;\n      draft.imagePaths.length = 0;\n      draft.searchPostLoading = false;\n      draft.searchPostDone = false;\n      draft.searchPostError = null;\n      draft.loadProfilePostLoading = false;\n      draft.loadProfilePostDone = false;\n      draft.loadProfilePostError = null;\n      draft.upLoadImagesLoading = false;\n      draft.upLoadImagesDone = false;\n      draft.upLoadImagesError = null;\n      draft.likePostLoading = false;\n      draft.likePostDone = false;\n      draft.likePostError = null;\n      draft.unlikePostLoading = false;\n      draft.unlikePostDone = false;\n      draft.unlikePostError = null;\n      draft.loadSPostLoading = false;\n      draft.loadSPostDone = false;\n      draft.loadSPostError = null;\n      draft.loadPostLoading = false;\n      draft.loadPostDone = false;\n      draft.loadPostError = null;\n      draft.loadUserPostsLoading = false;\n      draft.loadUserPostsDone = false;\n      draft.loadUserPostsError = null;\n      draft.addPostLoading = false;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      draft.removePostLoading = false;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      draft.modifyPostLoading = false;\n      draft.modifyPostDone = false;\n      draft.modifyPostError = null;\n      draft.addCommentLoading = false;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case UPDATE_CHANGE_TAG_REQUEST:\n      draft.searchPosts = draft.mainPosts.filter(v => v.category === action.data);\n      break;\n\n    case UPDATE_SEARCH:\n      draft.inputSearch = action.data.searchword;\n      draft.select = action.data.select;\n      break;\n\n    case LOAD_SCHANGE_TAG_REQUEST:\n      draft.loadPostLoading = true;\n      draft.loadPostDone = false;\n      draft.loadPostError = null;\n      break;\n\n    case LOAD_SCHANGE_TAG_SUCCESS:\n      draft.mainPosts = action.data; // 기존 배열 밀어버리고 새롭게 10개씩 넣는다.\n\n      draft.loadPostLoading = false;\n      draft.loadPostDone = true;\n      break;\n\n    case LOAD_SCHANGE_TAG_FAILURE:\n      draft.loadPostError = action.error;\n      draft.loadPostLoading = false;\n      break;\n\n    case LOAD_CHANGE_TAG_REQUEST:\n      draft.loadPostLoading = true;\n      draft.loadPostDone = false;\n      draft.loadPostError = null;\n      break;\n\n    case LOAD_CHANGE_TAG_SUCCESS:\n      draft.hasMorePost = true;\n      draft.mainPosts = action.data; // 기존 배열 밀어버리고 새롭게 10개씩 넣는다.\n\n      draft.loadPostLoading = false;\n      draft.loadPostDone = true;\n      break;\n\n    case LOAD_CHANGE_TAG_FAILURE:\n      draft.loadPostError = action.error;\n      draft.loadPostLoading = false;\n      break;\n\n    case LOAD_SEARCH_POSTS_REQUEST:\n      draft.searchPostLoading = true;\n      draft.searchPostDone = false;\n      draft.searchPostError = null;\n      break;\n\n    case LOAD_SEARCH_POSTS_SUCCESS:\n      draft.mainPosts = action.data;\n      draft.searchPostLoading = false;\n      draft.searchPostDone = true;\n      draft.hasMorePost = action.data.length === 10;\n      break;\n\n    case LOAD_SEARCH_POSTS_FAILURE:\n      draft.searchPostError = action.error;\n      draft.searchPostLoading = false;\n      break;\n\n    case LOAD_RENTAL_POST_REQUEST:\n      draft.loadProfilePostLoading = true;\n      draft.loadProfilePostDone = false;\n      draft.loadProfilePostError = null;\n      break;\n\n    case LOAD_RENTAL_POST_SUCCESS:\n      {\n        if (action.data[0].board_boardnum === 1 || 2 || 3 || 4) {\n          // 렌탈 게시물이 쌓이고 있는경우\n          draft.mainPosts = draft.mainPosts.concat(action.data);\n        } else {\n          // 주제가 다른 게시물 덩어리를 가져올 경우\n          draft.mainPosts = action.data;\n        }\n\n        draft.loadProfilePostLoading = false;\n        draft.loadProfilePostDone = true;\n        break;\n      }\n\n    case LOAD_RENTAL_POST_FAILURE:\n      draft.loadProfilePostError = action.error;\n      draft.loadProfilePostLoading = false;\n      break;\n\n    case LOAD_WRITE_POST_REQUEST:\n      draft.loadProfilePostLoading = true;\n      draft.loadProfilePostDone = false;\n      draft.loadProfilePostError = null;\n      break;\n\n    case LOAD_WRITE_POST_SUCCESS:\n      {\n        if (action.data[0].boardNum === 5 || 6) {\n          // 렌탈 게시물이 쌓이고 있는경우\n          draft.mainPosts = draft.mainPosts.concat(action.data);\n        } else {\n          // 주제가 다른 게시물 덩어리를 가져올 경우\n          draft.mainPosts = action.data;\n        }\n\n        draft.loadProfilePostLoading = false;\n        draft.loadProfilePostDone = true;\n        break;\n      }\n\n    case LOAD_WRITE_POST_FAILURE:\n      draft.loadProfilePostError = action.error;\n      draft.loadProfilePostLoading = false;\n      break;\n\n    case UPDATE_TAG:\n      draft.selectedTag = action.data;\n      draft.hasMorePost = true;\n      break;\n\n    case REMOVE_IMAGE:\n      draft.imagePaths = draft.imagePaths.filter((v, i) => i !== action.data);\n      break;\n\n    case UPLOAD_IMAGES_REQUEST:\n      draft.upLoadImagesLoading = true;\n      draft.upLoadImagesDone = false;\n      draft.upLoadImagesError = null;\n      break;\n\n    case UPLOAD_IMAGES_SUCCESS:\n      {\n        draft.imagePaths = action.data;\n        draft.upLoadImagesLoading = false;\n        draft.upLoadImagesDone = true;\n        break;\n      }\n\n    case UPLOAD_IMAGES_FAILURE:\n      draft.upLoadImagesError = action.error;\n      draft.upLoadImagesLoading = false;\n      break;\n\n    case LIKE_POST_REQUEST:\n      draft.likePostLoading = true;\n      draft.likePostDone = false;\n      draft.likePostError = null;\n      break;\n\n    case LIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers.push({\n          id: action.data.UserId\n        });\n        draft.likePostLoading = false;\n        draft.likePostDone = true;\n        break;\n      }\n\n    case LIKE_POST_FAILURE:\n      draft.likePostError = action.error;\n      draft.likePostLoading = false;\n      break;\n\n    case UNLIKE_POST_REQUEST:\n      draft.unlikePostLoading = true;\n      draft.unlikePostDone = false;\n      draft.unlikePostError = null;\n      break;\n\n    case UNLIKE_POST_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Likers = post.Likers.filter(v => v.id !== action.data.UserId);\n        draft.unlikePostLoading = false;\n        draft.unlikePostDone = true;\n        break;\n      }\n\n    case UNLIKE_POST_FAILURE:\n      draft.unlikePostError = action.error;\n      draft.unlikePostLoading = false;\n      break;\n\n    case STATUS_POST_REQUEST:\n      draft.loadSPostLoading = true;\n      draft.loadSPostDone = false;\n      draft.loadSPostError = null;\n      break;\n\n    case STATUS_POST_SUCCESS:\n      draft.singlePost.status = action.data.status;\n      draft.loadSPostLoading = false;\n      draft.loadSPostDone = true;\n      break;\n\n    case STATUS_POST_FAILURE:\n      draft.loadSPostError = action.error;\n      draft.loadSPostLoading = false;\n      break;\n\n    case LOAD_SPOST_REQUEST:\n      draft.loadSPostLoading = true;\n      draft.loadSPostDone = false;\n      draft.loadSPostError = null;\n      break;\n\n    case LOAD_SPOST_SUCCESS:\n      draft.singlePost = action.data;\n\n      if (action.data.boardNum === 1 || action.data.boardNum === 2) {\n        const totalPath = action.data.ProdPostImages.map(v => draft.imagePaths.concat(v.src.toString()));\n\n        for (let i = 0; i < totalPath.length; i++) {\n          draft.imagePaths = draft.imagePaths.concat(totalPath[i][0]);\n        }\n      } else if (action.data.boardNum === 3 || action.data.boardNum === 4) {\n        const totalPath = action.data.PowerPostImages.map(v => draft.imagePaths.concat(v.src.toString()));\n\n        for (let i = 0; i < totalPath.length; i++) {\n          draft.imagePaths = draft.imagePaths.concat(totalPath[i][0]);\n        }\n      } else if (action.data.boardNum === 5) {\n        const totalPath = action.data.TogetherPostImages.map(v => draft.imagePaths.concat(v.src.toString()));\n\n        for (let i = 0; i < totalPath.length; i++) {\n          draft.imagePaths = draft.imagePaths.concat(totalPath[i][0]);\n        }\n      }\n\n      draft.loadSPostLoading = false;\n      draft.loadSPostDone = true;\n      break;\n\n    case LOAD_SPOST_FAILURE:\n      draft.loadSPostError = action.error;\n      draft.loadSPostLoading = false;\n      break;\n\n    case LOAD_LIKED_POSTS_REQUEST:\n    case LOAD_RELATED_POST_REQUEST:\n    case LOAD_USER_POSTS_REQUEST:\n    case LOAD_HASHTAG_POSTS_REQUEST:\n    case LOAD_POST_REQUEST:\n      draft.loadPostLoading = true;\n      draft.loadPostDone = false;\n      draft.loadPostError = null;\n      break;\n\n    case LOAD_LIKED_POSTS_SUCCESS:\n    case LOAD_RELATED_POST_SUCCESS:\n    case LOAD_USER_POSTS_SUCCESS:\n    case LOAD_HASHTAG_POSTS_SUCCESS:\n    case LOAD_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.concat(action.data); // 같은속성의 게시물을 쌓고있는 경우\n\n      draft.loadPostLoading = false;\n      draft.loadPostDone = true;\n      draft.hasMorePost = action.data.length === 10;\n      break;\n\n    case LOAD_LIKED_POSTS_FAILURE:\n    case LOAD_RELATED_POST_FAILURE:\n    case LOAD_USER_POSTS_FAILURE:\n    case LOAD_HASHTAG_POSTS_FAILURE:\n    case LOAD_POST_FAILURE:\n      draft.loadPostError = action.error;\n      draft.loadPostLoading = false;\n      break;\n\n    case SEND_DUMMYPOST_REQUEST:\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case SEND_DUMMYPOST_SUCCESS:\n    case ADD_POST_SUCCESS:\n      draft.mainPosts.unshift(action.data);\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.imagePaths = [];\n      break;\n\n    case SEND_DUMMYPOST_FAILURE:\n    case ADD_POST_FAILURE:\n      draft.addPostError = action.error;\n      draft.addPostLoading = false;\n      break;\n\n    case REMOVE_POST_REQUEST:\n      draft.removePostLoading = true;\n      draft.removePostDone = false;\n      draft.removePostError = null;\n      break;\n\n    case REMOVE_POST_SUCCESS:\n      draft.mainPosts = draft.mainPosts.filter(v => v.id !== action.data.PostId);\n      draft.removePostLoading = false;\n      draft.removePostDone = true;\n      break;\n\n    case REMOVE_POST_FAILURE:\n      draft.removePostError = action.error;\n      draft.removePostLoading = false;\n      break;\n\n    case MODIFY_POST_REQUEST:\n      draft.modifyPostLoading = true;\n      draft.modifyPostDone = false;\n      draft.modifyPostError = null;\n      break;\n\n    case MODIFY_POST_SUCCESS:\n      for (let i = 0; i < draft.mainPosts.length; i++) {\n        if (draft.mainPosts[i].id == action.data.id) {\n          draft.mainPosts = draft.mainPosts(i, 1, action.data);\n        }\n      }\n\n      draft.modifyPostLoading = false;\n      draft.modifyPostDone = true;\n      break;\n\n    case MODIFY_POST_FAILURE:\n      draft.modifyPostError = action.error;\n      draft.modifyPostLoading = false;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      }\n\n    case ADD_COMMENT_FAILURE:\n      draft.addCommentLoading = false;\n      draft.addCommentError = action.error;\n      break;\n\n    default:\n      break;\n  }\n});\n\nexport default reducer;","map":null,"metadata":{},"sourceType":"module"}